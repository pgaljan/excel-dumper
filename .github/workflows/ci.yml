name: Python CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pandas openpyxl xlrd
    
    - name: Debug environment (Unix)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        echo "Python version: $(python --version)"
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "Excel dumper package:"
        find . -name "excel_dumper" -type d || echo "excel_dumper directory not found"
        echo "Test files:"
        find . -name "test_*.py" -type f || echo "No test files found"
    
    - name: Debug environment (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        echo Python version:
        python --version
        echo Current directory:
        cd
        echo Directory contents:
        dir
        echo Test files:
        dir test_*.py /s /b 2>nul || echo No test files found
    
    - name: Test package import
      run: |
        python -c "
        import sys
        print('Python path:')
        for p in sys.path: print(f'  {p}')
        
        try:
            import excel_dumper
            print('✅ excel_dumper package imported successfully')
            print(f'Package location: {excel_dumper.__file__}')
        except ImportError as e:
            print(f'❌ Failed to import excel_dumper: {e}')
            
        try:
            from excel_dumper.dumper import extract_excel_data
            print('✅ extract_excel_data imported successfully')
        except ImportError as e:
            print(f'❌ Failed to import extract_excel_data: {e}')
        "
    
    - name: Run tests from tests directory
      if: hashFiles('tests/test_*.py') != ''
      run: |
        echo "Running tests from tests/ directory"
        python -m pytest tests/ -v --tb=short
    
    - name: Run tests from root directory  
      if: hashFiles('test_*.py') != ''
      run: |
        echo "Running tests from root directory"
        python -m pytest test_*.py -v --tb=short
    
    - name: Run tests with coverage (Ubuntu only)
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      run: |
        if [ -d "tests" ]; then
          python -m pytest tests/ --cov=excel_dumper --cov-report=xml --cov-report=term-missing -v
        else
          python -m pytest test_*.py --cov=excel_dumper --cov-report=xml --cov-report=term-missing -v
        fi

  basic-functionality:
    # Simple test that just verifies the package works
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.11']  # Test fewer combinations for speed
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install minimal dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas openpyxl xlrd
    
    - name: Test basic import and functionality
      run: |
        python -c "
        # Test basic imports
        import excel_dumper
        from excel_dumper.dumper import extract_excel_data, has_non_null_data
        print('✅ All imports successful')
        
        # Test basic functionality
        result = has_non_null_data(['test', 'data'])
        assert result == True, 'has_non_null_data should return True for valid data'
        
        result = has_non_null_data([None, None])
        assert result == False, 'has_non_null_data should return False for null data'
        
        print('✅ Basic functionality tests passed')
        print('Package is working correctly on this platform')
        "
